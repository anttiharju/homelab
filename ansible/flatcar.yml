---
- name: Install Flatcar Container Linux
  hosts: rescue
  become: true
  vars:
    flatcar_url_base: "https://raw.githubusercontent.com/flatcar/init/"
    flatcar_url_sha: "3d2f9c6d778b96b08ee7db661bb2af1a6a42679d" # dcf668ed485a9fd278273eb3214449bff3a4a83a
    flatcar_url_path: "/bin/flatcar-install"
  pre_tasks:
    - name: Check if HEAD script matches SHA-locked version
      delegate_to: localhost
      become: false
      block:
        - name: Create temporary directory for script comparison
          ansible.builtin.tempfile:
            state: directory
            suffix: flatcar-check
          register: compare_dir
          check_mode: false

        - name: Download flatcar-install from HEAD
          ansible.builtin.get_url:
            url: "{{ flatcar_url_base }}HEAD{{ flatcar_url_path }}"
            dest: "{{ compare_dir.path }}/flatcar-install"
            mode: "0644"
          check_mode: false

        - name: Download flatcar-install from SHA version
          ansible.builtin.get_url:
            url: "{{ flatcar_url_base }}{{ flatcar_url_sha }}{{ flatcar_url_path }}"
            dest: "{{ compare_dir.path }}/flatcar-install"
            mode: "0644"
          notify: Prompt for confirmation on SHA mismatch
          check_mode: false

        - name: Clean up temporary directory
          ansible.builtin.file:
            path: "{{ compare_dir.path }}"
            state: absent

  handlers:
    - name: Prompt for confirmation on SHA mismatch
      ansible.builtin.pause:
        prompt: "The SHA-locked flatcar-install script is out-of-date with HEAD. Press enter to continue or Ctrl+C to abort"
      listen: Prompt for confirmation on SHA mismatch

  tasks:
    - name: Update package repositories
      community.general.apk:
        update_cache: true

    - name: Install flatcar-install script dependencies
      community.general.apk:
        name:
          - bash
          - bzip2
          - lsblk
          - eudev
          - gpg
          - gawk
        state: present

    - name: Find largest disk
      ansible.builtin.set_fact:
        largest_disk: >-
          {{ ansible_devices | dict2items |
            selectattr('value.sectors', 'defined') |
            rejectattr('value.sectors', 'equalto', '0') |
            rejectattr('key', 'match', '^(loop|ram).*') |
            sort(attribute='value.sectors', reverse=true) |
            first }}

    - name: Create a temporary directory
      ansible.builtin.tempfile:
        state: directory
        suffix: flatcar-install
      register: temp_dir

    - name: Download the SHA-locked flatcar-install script to the temporary directory
      ansible.builtin.get_url:
        url: "{{ flatcar_url_base }}{{ flatcar_url_sha }}{{ flatcar_url_path }}"
        dest: "{{ temp_dir.path }}/flatcar-install"
        mode: "0755"
      register: flatcar_script
#    - name: Run flatcar-install script with the largest disk
#      ansible.builtin.command:
#        cmd: "{{ temp_dir.path }}/flatcar-install -d /dev/{{ largest_disk.key }} -C stable -i ignition.json"
#        chdir: "{{ temp_dir.path }}"
#      register: install_result
#
#    - name: Display installation result
#      ansible.builtin.debug:
#        var: install_result.stdout_lines
